/*
1. Any live cell with two or three live neighbours survives.
2. Any dead cell with three live neighbours becomes a live cell.
3. All other live cells die in the next generation. Similarly, all other dead cells stay dead.
*/


var cells = [];
var sizeFactor = 30;
var neighborCount;
var mX;
var mY;
var position;
var randAlive;
//var started = true;

function setup() {
  createCanvas(720, 720);
  let index = 0;
  for (let r = 0; r < height; r += height / sizeFactor) {
    for (let c = 0; c < width; c += width / sizeFactor) {
      randAlive = random(0, 1);
      cells[index++] = new cell(c, r, randAlive < 0.25);
    }
  }
  //print("STARTED: " + started);
}

function draw() {
  frameRate(5);
  background(255);
  for (position = 0; position < cells.length; position++) {
    if (
      position > sizeFactor &&
      position % sizeFactor != 0 &&
      position < sizeFactor * (sizeFactor - 1) &&
      (position + 1) % sizeFactor != 0
    ) {
      cells[position].checkStatus();
      cells[position].display();
    }
  }
  position = 0;
}

class cell {
  constructor(xPos, yPos, alive) {
    this.xPos = xPos;
    this.yPos = yPos;
    this.alive = alive;
  }

  display() {
    if (cells[position].alive) {
      fill(0);
    }
    if (!cells[position].alive) {
      fill(255);
    }
    rect(this.xPos, this.yPos, width / sizeFactor, height / sizeFactor);
  }

  checkStatus() {
    neighborCount = 0;
    if (cells[position - sizeFactor].alive) {
      neighborCount++;
    }
    if (cells[position - sizeFactor - 1].alive) {
      neighborCount++;
    }
    if (cells[position - sizeFactor + 1].alive) {
      neighborCount++;
    }
    if (cells[position - 1].alive) {
      neighborCount++;
    }
    if (cells[position + 1].alive) {
      neighborCount++;
    }
    if (cells[position + sizeFactor].alive) {
      neighborCount++;
    }
    if (cells[position + sizeFactor - 1].alive) {
      neighborCount++;
    }
    if (cells[position + sizeFactor + 1].alive) {
      neighborCount++;
    }

    //If it's dead and has 3 neighbors, make it alive
    if (this.alive == false && neighborCount == 3) {
      this.alive = true;
    }

    //If it's alive and has less than 2 or more than 3 neighbors, make it dead
    if (this.alive == true && (neighborCount < 2 || neighborCount > 3)) {
      this.alive = false;
    }
  }
}

function mousePressed() {
  mX = mouseX;
  mY = mouseY;
  for (let y = 0; y < cells.length; y++) {
    if (mX > cells[y].xPos && mX < cells[y].xPos + width / sizeFactor) {
      if (mY > cells[y].yPos && mY < cells[y].yPos + height / sizeFactor) {
        cells[y].alive = !cells[y].alive;
      }
    }
  }
}

/*function keyPressed() {
  if (keyCode == ENTER) {
    started = !started;
    print("STARTED: " + started);
  }
}*/
